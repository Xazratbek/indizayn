/**
 * @fileoverview Firestore Security Rules for the Design Portfolio application.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access by enforcing strict ownership for user profiles and projects.
 * It allows public read access to projects while restricting write access to the owner only.
 * Direct messages are secured to only allow access between the sender and receiver.
 * Notifications are designed to be user-specific with owner-only access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with the document ID matching the Firebase Auth UID.
 * - /projects/{projectId}: Stores portfolio projects. Each project has a `designerId` field indicating ownership.
 * - /messages/{messageId}: Stores direct messages between users.
 * - /notifications/{notificationId}: Stores notifications, each associated with a specific user via the `userId` field.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is granted for projects to showcase designer work.
 * - Writes to user profiles and projects are strictly limited to the owner.
 * - Messages can be read and written to, only between the two involved users.
 *
 * Denormalization for Authorization:
 * - Projects include a `designerId` field to enable ownership-based rules without additional reads.
 * - Notifications include a `userId` field to easily restrict access to the intended recipient.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that the user ID in the path matches the user ID in the data.
     */
    function isValidUserId() {
      return request.resource.data.uid == request.auth.uid;
    }
   /**
     * @description Stores all user profiles. The document ID is the user's Firebase Auth UID.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a profile with document ID 'user123'.
     * @allow (get, list) - User with UID 'user123' can read their profile data.
     * @deny (get, list) - User with UID 'user456' cannot read the profile data of 'user123'.
     * @allow (update, delete) - User with UID 'user123' can update/delete their profile.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete the profile of 'user123'.
     * @principle Enforces document ownership for writes; restricts read access to the owner.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && isValidUserId();
      allow update: if isExistingOwner(userId) && isValidUserId();
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores all portfolio projects created by users.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read/list projects.
     * @deny (create) - User cannot create a project without being signed in, or without a matching designerId.
     * @allow (create) - User can create a project if signed in and request.resource.data.designerId == request.auth.uid.
     * @allow (update, delete) - Only the designer (owner) can update or delete the project.
     * @deny (update, delete) - Another user cannot update or delete the project.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.designerId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.designerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.designerId == request.auth.uid;
    }

   /**
     * @description Stores all direct messages between users.
     * @path /messages/{messageId}
     * @allow (get) - Only the sender or receiver can read the message.
     * @deny (get) - A user who is neither the sender nor the receiver cannot read the message.
     * @allow (list) - Listing messages is not allowed.
     * @allow (create) - Only the sender can create a message.
     * @deny (update, delete) - No user can update or delete a message.
     * @principle Enforces that only the sender and receiver can access the message.
     */
    match /messages/{messageId} {
        allow get: if isSignedIn() && (resource.data.senderId == request.auth.uid || resource.data.receiverId == request.auth.uid);
        allow list: if false;
        allow create: if isSignedIn() && request.auth.uid == request.resource.data.senderId;
        allow update, delete: if false;
    }

    /**
     * @description Stores notifications for users.
     * @path /notifications/{notificationId}
     * @allow (get) - Only the user who is receiving the notification can read the notification.
     * @deny (get) - A user who is not the receiver cannot read the notification.
     * @allow (list) - Only the user who is receiving the notification can list the notification.
     * @deny (list) - A user who is not the receiver cannot list the notification.
     * @allow (create) - Only the user who is receiving the notification can create the notification.
     * @deny (update, delete) - No user can update or delete a notification.
     * @principle Enforces that only the receiver can access the notification.
     */
    match /notifications/{notificationId} {
      allow get, list: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }
  }
}