/**
 * @file Firebase Security Rules for Dizaynerlar application.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and allows public read access with owner-only writes for projects.
 * @data_structure
 *   - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 *   - /projects/{projectId}: Stores project data, publicly readable but writable only by the project's designer.
 * @key_security_decisions
 *   - Users can only access their own profile data.
 *   - Projects are publicly readable, but only the designer can modify them.
 *   - Denormalization: The `Project` entity contains a `designerId` field to easily enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user themselves can read or write their profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == request.resource.data.uid
     * @deny (get, update, delete) if request.auth.uid != userId
     * @deny (create) if request.auth.uid != request.resource.data.uid
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Check user ownership
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Check existing user ownership
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disable listing of all users

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure portfolio projects. Publicly readable, but only the designer can modify them.
     * @path /projects/{projectId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.designerId
     * @allow (update, delete) if request.auth.uid == resource.data.designerId
     * @deny (create) if request.auth.uid != request.resource.data.designerId
     * @deny (update, delete) if request.auth.uid != resource.data.designerId
     * @principle Allows public reads with owner-only writes.
     */
    match /projects/{projectId} {

      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Check user ownership
      function isOwner(designerId) {
        return request.auth.uid == designerId;
      }

       // Check existing user ownership
      function isExistingOwner(designerId) {
        return isOwner(designerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.designerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.designerId);
      allow delete: if isExistingOwner(resource.data.designerId);
    }
  }
}