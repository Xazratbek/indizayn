/**
 * @fileoverview Firestore Security Rules for the design portfolio application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection while enabling a public portfolio.
 * Users can only read/write their own profile data. Projects are publicly readable,
 * but only the creator can modify or delete them.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, where {userId} matches the
 *   Firebase Auth UID.
 * - /projects/{projectId}: Stores design portfolio projects. Each project contains
 *   a 'designerId' field indicating the project's creator.
 *
 * Key Security Decisions:
 * - User Listing Disallowed: The rules explicitly prevent listing all users,
 *   protecting user privacy.
 * - Projects are publicly readable, but write access is restricted to the project creator.
 * - In this initial prototyping stage, data validation is relaxed. Only the
 *   'designerId' on project creation is validated to match the authenticated user.
 *
 * Denormalization for Authorization:
 * - The 'Project' entity includes a 'designerId' field. This denormalization
 *   is critical. It allows project-level rules to efficiently verify ownership
 *   without needing to perform additional 'get' operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user with matching UID can create their profile.
     * @allow (get,update,delete) Authenticated user with matching UID can access their profile.
     * @deny (list) Listing all users is not allowed.
     * @deny (create,update,delete) Unauthenticated users cannot create, update, or delete profiles.
     * @principle Enforces user ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants access to design portfolio projects.
     * @path /projects/{projectId}
     * @allow (get,list) Anyone can read projects.
     * @allow (create) Authenticated user can create a project, and designerId must match their UID.
     * @allow (update,delete) Only the project creator can update or delete.
     * @deny (update,delete) Non-owners cannot update or delete.
     * @principle Enforces public read access with owner-only writes.
     */
    match /projects/{projectId} {
        function isSignedIn() {
            return request.auth != null;
        }
        function isOwner(designerId) {
            return isSignedIn() && request.auth.uid == designerId;
        }
        function isExistingOwner(designerId) {
            return isOwner(designerId) && resource != null;
        }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.designerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.designerId);
      allow delete: if isExistingOwner(resource.data.designerId);
    }
  }
}