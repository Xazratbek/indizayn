/**
 * @fileoverview Firestore Security Rules for the Design Portfolio App.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing a strict user-ownership model
 * for user profiles and allows public read access to projects while restricting
 * write access to the project owner.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, with the document ID
 *   matching the Firebase Auth UID.
 * - /projects/{projectId}: Stores portfolio projects created by users.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and only accessible to the owning user.
 * - Project listing is public, but project creation, modification, and deletion
 *   are restricted to the project's designer/owner.
 *
 * Denormalization for Authorization:
 * The 'Project' entity contains a 'designerId' field to enable simple and
 * performant ownership checks for project write operations. This avoids the
 * need for complex queries or additional reads to determine project ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching UID can access their own profile.
     * @allow (create) User with matching UID can create their own profile.
     * @deny (get, list, create, update, delete) Any other user cannot access another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to project documents.
     * @path /projects/{projectId}
     * @allow (get, list) Any user can view the project.
     * @allow (create) Only the authenticated designer can create a project with their designerId.
     * @allow (update, delete) Only the project's designer can modify or delete it.
     * @deny (create, update, delete) If not the project owner.
     * @principle Allows public read access but restricts write access to the project owner.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return resource.data.designerId == request.auth.uid;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.designerId == request.auth.uid;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }
  }
}