/**
 * @fileoverview Firestore Security Rules for the Design Portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and allows public read access to portfolio projects
 * while restricting write access to the project owner.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Document ID is the Firebase Auth UID.
 * - /projects/{projectId}: Stores portfolio projects. Each document has a 'designerId' field indicating the owner.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Portfolio projects are publicly readable.
 * - Only the designer (owner) can create, update, or delete their projects.
 * - Listing all users is disallowed to protect privacy and prevent data scraping.
 *
 * Denormalization for Authorization:
 * The 'Project' entity contains a 'designerId' field, which is used to authorize write access based on ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) User with matching UID can read their own profile.
     * @allow (create) User can create their own profile if the UID matches.
     * @allow (update) User can update their own profile if the UID matches.
     * @allow (delete) User can delete their own profile if the UID matches.
     * @deny (get) User cannot read another user's profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (update) User cannot update another user's profile.
     * @deny (delete) User cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Disallowing listing all users for privacy

      allow create: if isSignedIn() && isSelfCreation(userId, request.resource.data.uid);
      allow update: if isExistingOwner(userId) && isUidNotChanged(userId, resource.data.uid);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to portfolio project documents.
     * @path /projects/{projectId}
     * @allow (get, list) Any user can read or list all projects.
     * @allow (create) User can create a project if the designerId matches their UID.
     * @allow (update) User can update their project if the designerId matches their UID.
     * @allow (delete) User can delete their project if the designerId matches their UID.
     * @deny (create) User cannot create a project with a mismatched designerId.
     * @deny (update) User cannot update a project they don't own.
     * @deny (delete) User cannot delete a project they don't own.
     * @principle Public read access with owner-only writes.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.designerId == request.auth.uid;
      allow update: if isProjectExistingOwner(request.auth.uid, resource.data.designerId);
      allow delete: if isProjectExistingOwner(request.auth.uid, resource.data.designerId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

     function isProjectExistingOwner(userId, designerId) {
        return userId == designerId && resource != null;
    }

    function isSelfCreation(userId, dataUid) {
        return isSignedIn() && isOwner(userId) && userId == dataUid;
    }

    function isUidNotChanged(userId, dataUid) {
        return isSignedIn() && isOwner(userId) && userId == dataUid;
    }
  }
}