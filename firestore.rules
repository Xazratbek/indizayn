/**
 * @fileoverview Firestore Security Rules for the design portfolio application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a balance between public readability of design projects and strict user-ownership for user profiles and project creation/modification.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the owner.
 * - /projects/{projectId}: Stores design projects, publicly readable but modifiable only by the project creator.
 *
 * Key Security Decisions:
 * - Public Project Listing: Allows anyone to list all design projects.
 * - User Profile Ownership: Enforces strict ownership for user profiles.
 * - Project Ownership: Enforces project ownership, preventing unauthorized modifications.
 *
 * Denormalization for Authorization:
 * The 'Project' entity requires a 'designerId' field to exist on each project document. This is used to authorize updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, list): User with matching UID can read their profile.
     * @allow (create, update, delete): User with matching UID can modify their profile.
     * @deny (get, list): User attempts to read another user's profile.
     * @deny (create, update, delete): User attempts to modify another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows anyone to read projects, but only the creator can modify them.
     * @path /projects/{projectId}
     * @allow (get, list): Any user can read any project.
     * @allow (create): User can create a project if the designerId matches their UID.
     * @allow (update, delete): Only the project creator (designerId) can modify or delete the project.
     * @deny (create): User attempts to create a project with a mismatched designerId.
     * @deny (update, delete): User attempts to modify or delete a project they don't own.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(designerId) {
        return isSignedIn() && request.auth.uid == designerId;
      }
      
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.designerId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.designerId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.designerId == request.auth.uid;
    }
  }
}