/**
 * @fileoverview Firestore Security Rules for the Design Portfolio application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection, enforcing strict ownership for user profiles
 * and public read access with owner-only writes for portfolio projects. This approach aims
 * to balance data accessibility with robust security.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, with the document ID matching the Firebase Auth UID.
 * - /projects/{projectId}: Contains portfolio projects, with an owner reference to the designer.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent enumeration.
 * - Projects are publicly readable, but only the owner can create, update, or delete them.
 *
 * Denormalization for Authorization:
 * - Projects include a `designerId` field to directly enforce ownership without needing to query
 *   separate user documents. This optimizes rule performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, ensuring only the authenticated user can read/write their own data.
     * @path /users/{userId}
     * @allow (create) - User 'user_abc' can create their profile if authenticated as 'user_abc'.
     * @allow (get, list, update, delete) - User 'user_abc' can read/write their profile if authenticated as 'user_abc'.
     * @deny (create, get, list, update, delete) - User 'user_xyz' cannot access 'user_abc' profile data.
     * @principle Enforces strict user-ownership for all profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages portfolio projects, allowing public read access but restricting write access to the project owner.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read the project.
     * @allow (create) - User 'user_abc' can create a project if authenticated as 'user_abc' and sets 'designerId' to 'user_abc'.
     * @allow (update, delete) - User 'user_abc' can update/delete a project if authenticated as 'user_abc' and is the owner ('designerId').
     * @deny (create, update, delete) - User 'user_xyz' cannot modify 'user_abc' projects.
     * @principle Implements public read with owner-only write access control.
     */
    match /projects/{projectId} {
      function isOwner(designerId) {
        return request.auth != null && request.auth.uid == designerId;
      }

      function isExistingOwner(designerId) {
        return isOwner(designerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isOwner(request.resource.data.designerId);
      allow update: if isExistingOwner(resource.data.designerId);
      allow delete: if isExistingOwner(resource.data.designerId);
    }
  }
}