/**
 * @fileoverview Firestore Security Rules for the design portfolio application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user ownership and public readability where appropriate.
 * Users can read public designer profile information, while only the owner can modify their profile.
 * Projects are publicly readable and only the designated designer can modify them.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the document ID being the Firebase Auth UID.
 * - /projects/{projectId}: Stores design portfolio projects.
 *
 * Key Security Decisions:
 * - Users can read all user documents (public profiles).
 * - Users can only modify their own user document.
 * - Projects are publicly readable.
 * - Only the designer associated with a project can modify it.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * - Projects denormalize the designer's UID (`designerId`) to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get) Any user can read any user profile.
     * @allow (create) User can create their own profile if the UID matches.
     * @allow (update) User can update their own profile if the UID matches.
     * @allow (delete) User can delete their own profile if the UID matches.
     * @deny (list) Listing users is not allowed.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (update) User cannot update another user's profile.
     * @deny (delete) User cannot delete another user's profile.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /users/{userId} {
      // Helper function to check if the request is made by the owner of the user document.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Allow anyone to read user profiles (public profiles).
      allow get: if true;

      // Prevent listing of user documents.
      allow list: if false;

      // Allow creating a user document only if the UID matches the authenticated user's UID.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;

      // Allow updating a user document only if the UID matches and the user exists.
      allow update: if isOwner(userId) && request.resource.data.uid == resource.data.uid && resource != null;

      // Allow deleting a user document only if the UID matches and the user exists.
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to project documents.
     * @path /projects/{projectId}
     * @allow (get, list) Any user can read any project.
     * @allow (create) Authenticated user can create a project if the designerId matches their UID.
     * @allow (update, delete) Only the designer who created the project can update or delete it.
     * @deny (create) Non-authenticated user cannot create a project.
     * @deny (update, delete) A user cannot modify a project they did not create.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /projects/{projectId} {
        // Helper function to check if the request is made by the designer of the project.
        function isDesigner(designerId) {
          return request.auth.uid == designerId;
        }

        // Allow anyone to read and list projects.
        allow get, list: if true;

        // Allow creating a project if authenticated and designerId matches the user's UID.
        allow create: if request.auth != null && request.resource.data.designerId == request.auth.uid;

        // Allow updating/deleting a project only if the user is the designer of the project and project exists.
        allow update, delete: if isDesigner(resource.data.designerId) && resource != null;
    }
  }
}