/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and allows public read access to projects.
 * @data_structure
 *   - /users/{userId}: Stores user profiles, with the document ID matching the Firebase Auth UID.
 *   - /projects/{projectId}: Stores project data.
 * @key_security_decisions
 *   - Users can only read/write their own profile data.
 *   - Listing of all users is denied.
 *   - Projects are publicly readable but only the owner can modify or delete them.
 * @denormalization_for_authorization None.
 * @structural_segregation The app uses separate collections for user profiles (private) and projects (public read, owner write), enhancing security and performance.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User 'iIdoq6EbOmaqKYzYCCaQfqrKlsL2' can create their own profile if the UID matches.
     * @deny (create) User 'iIdoq6EbOmaqKYzYCCaQfqrKlsL2' cannot create a profile with a mismatched UID.
     * @allow (get) User 'iIdoq6EbOmaqKYzYCCaQfqrKlsL2' can read their own profile.
     * @deny (get) User 'randomUserId' cannot read the profile of user 'iIdoq6EbOmaqKYzYCCaQfqrKlsL2'.
     * @allow (update) User 'iIdoq6EbOmaqKYzYCCaQfqrKlsL2' can update their own profile.
     * @deny (update) User 'randomUserId' cannot update the profile of user 'iIdoq6EbOmaqKYzYCCaQfqrKlsL2'.
     * @allow (delete) User 'iIdoq6EbOmaqKYzYCCaQfqrKlsL2' can delete their own profile.
     * @deny (delete) User 'randomUserId' cannot delete the profile of user 'iIdoq6EbOmaqKYzYCCaQfqrKlsL2'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to project documents. Projects are publicly readable, but only the owner can modify or delete them.
     * @path /databases/{database}/documents/projects/{projectId}
     * @allow (get) Any user can read any project.
     * @allow (list) Any user can list all projects.
     * @allow (create) User 'iIdoq6EbOmaqKYzYCCaQfqrKlsL2' can create a project if they are the owner.
     * @deny (create) User 'iIdoq6EbOmaqKYzYCCaQfqrKlsL2' cannot create a project if the designerId does not match their UID.
     * @allow (update) User 'iIdoq6EbOmaqKYzYCCaQfqrKlsL2' can update a project if they are the owner.
     * @deny (update) User 'randomUserId' cannot update the project of user 'iIdoq6EbOmaqKYzYCCaQfqrKlsL2'.
     * @allow (delete) User 'iIdoq6EbOmaqKYzYCCaQfqrKlsL2' can delete a project if they are the owner.
     * @deny (delete) User 'randomUserId' cannot delete the project of user 'iIdoq6EbOmaqKYzYCCaQfqrKlsL2'.
     * @principle Allows public read access to projects while enforcing ownership for write operations.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.designerId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.designerId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.designerId == request.auth.uid;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}