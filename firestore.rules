/**
 * @fileoverview Firestore Security Rules for the design portfolio application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection by enforcing strict ownership
 * for user profiles and public read access for portfolio projects. Data validation
 * is relaxed to facilitate rapid prototyping.
 *
 * Data Structure:
 * - Users: Stored in `/users/{userId}`. Each user document's ID matches their Firebase Auth UID.
 * - Projects: Stored in `/projects/{projectId}`. Projects contain a `designerId` field
 *   linking them to their creator.
 *
 * Key Security Decisions:
 * - User listing is denied to prevent unauthorized access to user data.
 * - Public read access is granted for projects, but write access is restricted to the project owner.
 * - Data validation is minimal, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - Each project document contains a `designerId` field, which is used to verify ownership
 *   for update and delete operations. This avoids costly `get()` calls to the user's profile.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile (if UID matches document ID).
     * @allow (get, update, delete) Authenticated user can only access their own profile.
     * @deny (list) Prevents listing all user profiles.
     * @deny (create) If the authenticated user's id doesn't match the user id
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      // Allow the user to create their own profile, but enforce that the
      // document ID matches their user ID.
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;

      // Enforce that the user can only update/delete their own profile, and that
      // the user ID cannot be changed.
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to project documents.
     * @path /projects/{projectId}
     * @allow (get, list) Anyone can view the projects.
     * @allow (create) Authenticated user can create a project if designerId matches their UID.
     * @allow (update, delete) Only the designer can modify or delete their own projects.
     * @deny (create) if the designerId doesn't match the user id
     * @principle Allows public read access to projects, but enforces ownership for writes.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(designerId) {
        return request.auth.uid == designerId;
      }

      function isExistingOwner(designerId) {
        return isOwner(designerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;

      // Only allow authenticated users to create projects, and enforce that the
      // designerId matches their user ID.
      allow create: if isSignedIn() && request.resource.data.designerId == request.auth.uid;

      // Enforce that only the owner can update/delete the project, and that
      // the designerId cannot be changed.
      allow update: if isExistingOwner(resource.data.designerId) && request.resource.data.designerId == resource.data.designerId;
      allow delete: if isExistingOwner(resource.data.designerId);
    }
  }
}