/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a flexible security model that allows all read and write operations on /messages and /notifications, and owner-based authorization for user profiles and their projects.
 * @dataStructure
 * - /users/{userId}: Stores user profiles, with the document ID matching the Firebase Auth UID.
 * - /projects/{projectId}: Stores portfolio projects created by users.
 * - /messages/{messageId}: Stores direct messages between users.
 * - /notifications/{notificationId}: Stores notifications for users.
 * @keySecurityDecisions
 * - User listing is disallowed.
 * - All read and write operations are allowed for /messages and /notifications collections.
 * - User profiles and projects are secured using an ownership model, where only the owner (creator) can modify or delete them.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Only the user can read or modify their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile document with matching ID.
     * @allow (get, list) - User with UID 'user123' can read their own profile.
     * @allow (update) - User with UID 'user123' can update their own profile.
     * @allow (delete) - User with UID 'user123' can delete their own profile.
     * @deny (create) - User with UID 'user123' cannot create a profile with a different ID 'user456'.
     * @deny (update) - User with UID 'user123' cannot update the profile of another user 'user456'.
     * @deny (delete) - User with UID 'user123' cannot delete the profile of another user 'user456'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, and validates relational integrity between documents.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages portfolio projects. Only the designer can create, read, update, or delete their own projects.
     * @path /projects/{projectId}
     * @allow (create) - Designer with UID 'designer123' can create a new project with designerId 'designer123'.
     * @allow (get, list) - Any user can read/list any project.
     * @allow (update) - Designer with UID 'designer123' can update their own project.
     * @allow (delete) - Designer with UID 'designer123' can delete their own project.
     * @deny (create) - Designer with UID 'designer123' cannot create a project with a different designerId 'designer456'.
     * @deny (update) - Designer with UID 'designer123' cannot update a project they don't own (designerId 'designer456').
     * @deny (delete) - Designer with UID 'designer123' cannot delete a project they don't own (designerId 'designer456').
     * @principle Enforces document ownership for writes and validates relational integrity between documents.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(designerId) {
        return request.auth.uid == designerId;
      }

        function isExistingOwner(designerId) {
        return isOwner(designerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages direct messages between users. Allows all read and write operations.
     * @path /messages/{messageId}
     * @allow (create) - Any signed-in user can create a message.
     * @allow (get, list) - Any signed-in user can read any message.
     * @allow (update) - Any signed-in user can update any message.
     * @allow (delete) - Any signed-in user can delete any message.
     * @principle Allows all operations.
     */
    match /messages/{messageId} {
        function isSignedIn() {
        return request.auth != null;
      }
      allow get, list, create, update, delete: if isSignedIn();
    }

      /**
     * @description Manages notifications for users. Allows all read and write operations.
     * @path /notifications/{notificationId}
     * @allow (create) - Any signed-in user can create a notification.
     * @allow (get, list) - Any signed-in user can read any notification.
     * @allow (update) - Any signed-in user can update any notification.
     * @allow (delete) - Any signed-in user can delete any notification.
     * @principle Allows all operations.
     */
    match /notifications/{notificationId} {
        function isSignedIn() {
        return request.auth != null;
      }
      allow get, list, create, update, delete: if isSignedIn();
    }
  }
}