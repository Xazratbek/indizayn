/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a user-ownership model for user profiles and allows public read access to portfolio projects while enforcing ownership for write access.
 * @data-structure
 *   - /users/{userId}: Stores user profile data. The `userId` path parameter must match the authenticated user's UID.
 *   - /projects/{projectId}: Stores portfolio projects. Any user can read project data, but only the project's designer can modify or delete it.
 * @key-security-decisions
 *   - Users can only read and write their own profile data.
 *   - Project data is publicly readable, but only the creator can modify or delete it.
 *   - Listing of users is disallowed to protect user privacy.
 * @denormalization-for-authorization
 *   - Projects contain a `designerId` field, which is used to enforce ownership for write operations. This avoids the need for additional reads to verify ownership.
 * @structural-segregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (create) An unauthenticated user cannot create a profile.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Do not allow listing of users.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to projects, but restricts write access to the project's designer.
     * @path /projects/{projectId}
     * @allow (get) Any user can read a project.
     * @allow (list) Any user can list projects.
     * @allow (create) Authenticated user can create a project.
     * @allow (update) Only the designer can update a project.
     * @allow (delete) Only the designer can delete a project.
     * @deny (create) An unauthenticated user cannot create a project.
     * @deny (update) A non-designer user cannot update the project.
     * @deny (delete) A non-designer user cannot delete the project.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isProjectOwner() {
        return isSignedIn() && request.auth.uid == resource.data.designerId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isProjectOwner();
      allow delete: if isProjectOwner();
    }
  }
}