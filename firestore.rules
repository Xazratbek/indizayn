/**
 * @fileoverview Firestore Security Rules for the Design Portfolio application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection while allowing controlled public access to portfolio projects.
 * It enforces a strict user-ownership model for user profiles and allows public read access to projects,
 * with write access restricted to the project owner.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the document ID matching the Firebase Auth UID.
 * - /projects/{projectId}: Stores portfolio projects created by users.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Projects are publicly readable but only writable by their respective owners (designers).
 * - Listing of users is disallowed to prevent data scraping and protect user privacy.
 *
 * Denormalization for Authorization:
 * The `Project` entity requires a `designerId` field to enable the "Public Read with Owner-Only Writes" pattern.
 * This pattern is applied to the `/projects/{projectId}` collection, allowing public read access while
 * restricting write access to the designer who created the project.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, and delete their profile.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @deny (list) - Prevents listing all user profiles.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update/delete user 'user_abc's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to portfolio projects.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user, including anonymous, can read or list all projects.
     * @allow (create) - User with UID 'user_abc' can create a project with designerId 'user_abc'.
     * @allow (update, delete) - User with UID 'user_abc' can update/delete a project they own.
     * @deny (create) - User with UID 'user_xyz' cannot create a project with designerId 'user_abc'.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update/delete project owned by 'user_abc'.
     * @principle Allows public read access to projects but restricts write access to the owner.
     */
    match /projects/{projectId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.designerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.designerId);
      allow delete: if isExistingOwner(resource.data.designerId);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to compare against request.auth.uid.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource.
     * @param {string} userId - The user ID to compare against resource.data.userId.
     * @return {bool} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}