/**
 * @fileoverview Firestore Security Rules for the design portfolio application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection, allowing only authenticated users to access their own data while permitting public read access to portfolio projects.
 *
 * Data Structure:
 * - User profiles are stored in `/users/{userId}`, where `{userId}` matches the Firebase Auth UID.
 * - Portfolio projects are stored in `/projects/{projectId}`.  Projects contain a `designerId` field indicating ownership.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Project data is publicly readable but can only be created, updated, or deleted by the project's owner (the designer).
 * - Listing of users is not allowed.
 *
 * Denormalization for Authorization:
 * - The `Project` entity includes a `designerId` field. This denormalization is **critical** for implementing owner-only writes on projects without needing to perform costly `get()` operations to look up the designer's ID from a separate document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Restricts access to user profiles. Users can only read and write their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) - If the user is creating their own profile (auth.uid == userId).
     * @allow (get, update, delete) - If the user is the owner of the profile (auth.uid == userId).
     * @deny (create) - If the user is attempting to create a profile with a different userId.
     * @deny (get, update, delete) - If the user is not the owner of the profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to portfolio projects.  Anyone can read project data, but only the owner can create, update, or delete.
     * @path /databases/{database}/documents/projects/{projectId}
     * @allow (get, list) - Public read access is allowed for all projects.
     * @allow (create) - If the user is authenticated and the designerId matches their UID.
     * @allow (update, delete) - If the user is authenticated and is the owner of the project (designerId matches their UID).
     * @deny (create) - If the user is not authenticated or the designerId does not match their UID.
     * @deny (update, delete) - If the user is not the owner of the project.
     * @principle Public read, owner-only write access for portfolio projects.
     */
    match /projects/{projectId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(designerId) {
        return request.auth.uid == designerId;
      }

      function isExistingOwner(designerId) {
        return isOwner(designerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.designerId);
      allow update: if isExistingOwner(resource.data.designerId);
      allow delete: if isExistingOwner(resource.data.designerId);
    }
  }
}