/**
 * @description This ruleset enforces a strict user-ownership model for user profiles and allows public read access to projects while enforcing owner-only write access.
 * @dataStructure
 *   - Users are stored under `/users/{userId}`, where `{userId}` is the Firebase Auth UID.
 *   - Projects are stored under `/projects/{projectId}` and are publicly readable.
 * @keySecurityDecisions
 *   - Users can only read/write their own profile data.
 *   - Projects are publicly readable, but only the owner can create, update, or delete them.
 *   - Listing of users is disallowed to prevent data scraping.
 * @denormalizationForAuthorization
 *   - Project documents include a `designerId` field to simplify ownership checks during write operations.
 * @structuralSegregation
 *   - Uses separate collections for users (private) and projects (public read, owner-write).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a profile with document ID 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read/update/delete their own profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile with document ID 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read/update/delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the request is made by the owner.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the request is made by an existing owner.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to projects while enforcing owner-only write access.
     * @path /projects/{projectId}
     * @allow (get, list) - Any user can read any project.
     * @allow (create) - User with UID 'user123' can create a project with designerId 'user123'.
     * @allow (update, delete) - User with UID 'user123' can update/delete a project where resource.data.designerId == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a project with designerId 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete a project where resource.data.designerId == 'user123'.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /projects/{projectId} {
      // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the request is made by the owner.
      function isOwner(designerId) {
        return request.auth.uid == designerId;
      }

      // Helper function to check if the request is made by an existing owner.
      function isExistingOwner(designerId) {
        return isOwner(designerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.designerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.designerId);
      allow delete: if isExistingOwner(resource.data.designerId);
    }
  }
}