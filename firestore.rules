/**
 * @fileoverview Firestore Security Rules for the Design Portfolio application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and allows public read access to portfolio projects
 * while restricting write access to the project creator.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data. Each document ID is the Firebase Auth UID.
 * - /projects/{projectId}: Stores project data, with a `designerId` field indicating the owner.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Projects are publicly readable.
 * - Only the project creator can create, update, or delete projects.
 * - Data validation is relaxed during prototyping, focusing on ownership and relational integrity.
 *
 * Denormalization for Authorization:
 * - The `Project` entity has a `designerId` field, which is used to authorize project modifications.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (get) Authenticated user can read their own profile.
     * @allow (create) Authenticated user can create their own profile if the UID matches.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (get) Authenticated user cannot read another user's profile.
     * @deny (create) Authenticated user cannot create a profile with a mismatched UID.
     * @deny (update) Authenticated user cannot update another user's profile.
     * @deny (delete) Authenticated user cannot delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to portfolio projects.
     * @path /projects/{projectId}
     * @allow (get) Any user can read any project.
     * @allow (list) Any user can list projects.
     * @allow (create) Authenticated user can create a project if they are the designer.
     * @allow (update) Authenticated user can update a project if they are the designer.
     * @allow (delete) Authenticated user can delete a project if they are the designer.
     * @deny (create) Unauthenticated user cannot create a project.
     * @deny (update) Authenticated user cannot update a project if they are not the designer.
     * @deny (delete) Authenticated user cannot delete a project if they are not the designer.
     * @principle Allows public read access with owner-only writes for projects.
     */
    match /projects/{projectId} {
      function isProjectOwner(designerId) {
        return request.auth != null && request.auth.uid == designerId;
      }
      function isExistingProjectOwner(designerId) {
        return isProjectOwner(designerId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null && isProjectOwner(request.resource.data.designerId);
      allow update: if isExistingProjectOwner(resource.data.designerId);
      allow delete: if isExistingProjectOwner(resource.data.designerId);
    }
  }
}