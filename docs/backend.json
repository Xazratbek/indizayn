
{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a designer's profile in the DesignFlow application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the UserProfile entity."
        },
        "profilePicture": {
          "type": "string",
          "description": "URL of the designer's profile picture.",
          "format": "uri"
        },
        "name": {
          "type": "string",
          "description": "The designer's name."
        },
        "specializations": {
          "type": "array",
          "description": "List of specializations (UI/UX, Motion, Branding, etc.).",
          "items": {
            "type": "string"
          }
        },
        "subscriberCount": {
          "type": "number",
          "description": "Number of subscribers following the designer."
        },
        "bio": {
          "type": "string",
          "description": "A short biography of the designer."
        },
        "email": {
          "type": "string",
          "description": "The designer's email address.",
          "format": "email"
        }
      },
      "required": [
        "id",
        "profilePicture",
        "name",
        "specializations",
        "subscriberCount",
        "email"
      ]
    },
    "Portfolio": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Portfolio",
      "type": "object",
      "description": "Represents a design portfolio project.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Portfolio entity."
        },
        "userProfileId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Portfolio)"
        },
        "image": {
          "type": "string",
          "description": "URL of the portfolio project image.",
          "format": "uri"
        },
        "name": {
          "type": "string",
          "description": "Name of the portfolio project."
        },
        "tags": {
          "type": "array",
          "description": "Tags associated with the project.",
          "items": {
            "type": "string"
          }
        },
        "viewCount": {
          "type": "number",
          "description": "Number of views for the project."
        },
        "likeCount": {
          "type": "number",
          "description": "Number of likes for the project."
        },
        "description": {
          "type": "string",
          "description": "A detailed description of the portfolio project."
        }
      },
      "required": [
        "id",
        "userProfileId",
        "image",
        "name",
        "tags",
        "viewCount",
        "likeCount",
        "description"
      ]
    },
    "Like": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Like",
      "type": "object",
      "description": "Represents a user liking a portfolio item.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Like entity."
        },
        "userProfileId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N Like)"
        },
        "portfolioId": {
          "type": "string",
          "description": "Reference to Portfolio. (Relationship: Portfolio 1:N Like)"
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the like was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userProfileId",
        "portfolioId",
        "timestamp"
      ]
    },
    "Follow": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Follow",
      "type": "object",
      "description": "Represents a user following another user (designer).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Follow entity."
        },
        "followerId": {
          "type": "string",
          "description": "Reference to UserProfile (the follower). (Relationship: UserProfile 1:N Follow)"
        },
        "followingId": {
          "type": "string",
          "description": "Reference to UserProfile (the designer being followed). (Relationship: UserProfile 1:N Follow)"
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp of when the follow relationship was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "followerId",
        "followingId",
        "timestamp"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}/userProfiles/{userProfileId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile data. The `userId` path segment ensures that only the authenticated user can access their profile. Includes `userId` in the profile document itself for redundancy.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "userProfileId",
              "description": "The unique identifier of the user profile."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/portfolios/{portfolioId}",
        "definition": {
          "entityName": "Portfolio",
          "schema": {
            "$ref": "#/backend/entities/Portfolio"
          },
          "description": "Stores portfolio items for each user.  The `userId` path segment ensures that only the authenticated user can access their portfolio. Includes `userId` in the portfolio document itself for redundancy.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "portfolioId",
              "description": "The unique identifier of the portfolio item."
            }
          ]
        }
      },
      {
        "path": "/likes/{likeId}",
        "definition": {
          "entityName": "Like",
          "schema": {
            "$ref": "#/backend/entities/Like"
          },
          "description": "Stores likes for portfolio items. A separate collection allows for efficient querying of likes.",
          "params": [
            {
              "name": "likeId",
              "description": "The unique identifier of the like."
            }
          ]
        }
      },
      {
        "path": "/follows/{followId}",
        "definition": {
          "entityName": "Follow",
          "schema": {
            "$ref": "#/backend/entities/Follow"
          },
          "description": "Stores follow relationships between users. A separate collection allows for efficient querying of followers and followees.",
          "params": [
            {
              "name": "followId",
              "description": "The unique identifier of the follow relationship."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure authorization independence, clarity, and scalability. User profiles and their associated portfolio items are stored in hierarchical paths (`/users/{userId}/userProfiles/{userProfileId}` and `/users/{userId}/portfolios/{portfolioId}`) to simplify ownership-based security rules. Likes and Follows are stored in separate collections for efficient querying and management. This structure promotes a homogeneous security posture by segregating data based on access requirements. Specifically, Authorization Independence is achieved by leveraging path-based ownership. Since each user owns the data in the `userProfiles` and `portfolios` collections, security rules can be written without relying on `get()` calls to parent documents.  The structure inherently supports secure `list` operations because the data is segregated into collections with clear ownership. This segregation prevents the need for complex filtering in security rules, thereby fulfilling the QAPs requirement."
  }
}
